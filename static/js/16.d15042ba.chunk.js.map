{"version":3,"sources":["hooks/useGetWalletNfts.ts","views/Nft/components/HowItWorks.tsx","views/Nft/components/InfoRow.tsx","views/Nft/components/Image.tsx","views/Nft/contexts/NftProvider.tsx","views/Nft/components/TransferNftModal.tsx","views/Nft/components/NftCard/index.tsx","views/Nft/components/NftGrid.tsx","views/Nft/components/NftList.tsx","views/Nft/index.tsx"],"names":["pancakeRabbitsContract","getPancakeRabbitContract","initialState","isLoading","nfts","reducer","state","action","type","data","useGetWalletNfts","useReducer","dispatch","account","useWallet","useEffect","a","methods","balanceOf","call","getTokenIdAndBunnyId","index","tokenOfOwnerByIndex","getBunnyId","tokenURI","tokenId","makeBatchRequest","bunnyId","tokenUri","Number","tokenIdPromises","i","push","Promise","all","tokenIdsOwnedByWallet","reduce","accum","association","tokenIds","fetchNfts","StyledHowItWorks","styled","div","theme","colors","textSubtle","Section","Icon","Text","UIKitText","Row","HowItWorks","TranslateString","useI18n","id","color","size","mb","as","href","target","rel","InfoRow","Container","borderColor","StyledImage","img","Image","src","alt","originalLink","previewImage","bunnyFactoryAddress","getBunnyFactoryAddress","NftProviderContext","createContext","NftProvider","children","isMounted","useRef","useState","isInitialized","hasClaimed","startBlockNumber","endBlockNumber","setState","currentBlock","useBlock","nftList","multicall","bunnyFactory","address","name","startBlockNumberArr","endBlockNumberArr","prevState","toNumber","console","error","fetchContractData","params","hasClaimedArr","current","canBurnNft","Provider","value","getTokenIds","reInitialize","Value","ModalContent","Actions","Label","label","text","TransferNftModal","nft","onSuccess","onDismiss","setIsLoading","setValue","setError","usePancakeRabbits","handleConfirm","Web3","utils","isAddress","transferFrom","send","from","on","title","htmlFor","placeholder","onChange","evt","inputValue","isWarning","disabled","fullWidth","variant","onClick","Header","DetailsButton","Button","attrs","InfoBlock","NftCard","isOpen","setIsOpen","useContext","profile","useProfile","images","description","walletOwnsNft","length","ChevronUpIcon","ChevronDownIcon","handleClick","useModal","onPresentTransferModal","isActive","lg","ipfs","outline","mt","p","endIcon","width","style","textAlign","NftGrid","BaseLayout","mediaQueries","sm","NftList","orderBy","map","StyledHero","Nft","Page"],"mappings":"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","file":"static/js/16.d15042ba.chunk.js","sourcesContent":["import { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { useEffect, useReducer } from 'react'\nimport { getPancakeRabbitContract } from 'utils/contractHelpers'\nimport makeBatchRequest from 'utils/makeBatchRequest'\n\nconst pancakeRabbitsContract = getPancakeRabbitContract()\n\nexport type NftMap = {\n  [key: number]: {\n    tokenUri: string\n    tokenIds: number[]\n  }\n}\n\ntype Action = { type: 'set_nfts'; data: NftMap } | { type: 'reset' }\n\ntype State = {\n  isLoading: boolean\n  nfts: NftMap\n}\n\nconst initialState: State = {\n  isLoading: true,\n  nfts: {},\n}\n\nconst reducer = (state: State, action: Action) => {\n  switch (action.type) {\n    case 'set_nfts':\n      return {\n        ...initialState,\n        isLoading: false,\n        nfts: action.data,\n      }\n    case 'reset':\n      return {\n        ...initialState,\n        isLoading: false,\n      }\n    default:\n      return state\n  }\n}\n\nconst useGetWalletNfts = () => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n  const { account } = useWallet()\n\n  useEffect(() => {\n    const fetchNfts = async () => {\n      try {\n        const balanceOf = await pancakeRabbitsContract.methods.balanceOf(account).call()\n\n        if (balanceOf > 0) {\n          let nfts: NftMap = {}\n\n          const getTokenIdAndBunnyId = async (index: number) => {\n            try {\n              const { tokenOfOwnerByIndex, getBunnyId, tokenURI } = pancakeRabbitsContract.methods\n              const tokenId = await tokenOfOwnerByIndex(account, index).call()\n              const [bunnyId, tokenUri] = await makeBatchRequest([getBunnyId(tokenId).call, tokenURI(tokenId).call])\n\n              return [Number(bunnyId), Number(tokenId), tokenUri]\n            } catch (error) {\n              return null\n            }\n          }\n\n          const tokenIdPromises = []\n\n          for (let i = 0; i < balanceOf; i++) {\n            tokenIdPromises.push(getTokenIdAndBunnyId(i))\n          }\n\n          const tokenIdsOwnedByWallet = await Promise.all(tokenIdPromises)\n\n          nfts = tokenIdsOwnedByWallet.reduce((accum, association) => {\n            if (!association) {\n              return accum\n            }\n\n            const [bunnyId, tokenId, tokenUri] = association\n\n            return {\n              ...accum,\n              [bunnyId]: {\n                tokenUri,\n                tokenIds: accum[bunnyId] ? [...accum[bunnyId].tokenIds, tokenId] : [tokenId],\n              },\n            }\n          }, {})\n\n          dispatch({ type: 'set_nfts', data: nfts })\n        } else {\n          // Reset it in case of wallet change\n          dispatch({ type: 'reset' })\n        }\n      } catch (error) {\n        dispatch({ type: 'reset' })\n      }\n    }\n\n    if (account) {\n      fetchNfts()\n    }\n  }, [account, dispatch])\n\n  return state\n}\n\nexport default useGetWalletNfts\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Button, Heading, Text as UIKitText, ArrowForwardIcon } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\n\nconst StyledHowItWorks = styled.div`\n  border-top: 1px solid ${({ theme }) => theme.colors.textSubtle};\n  padding: 24px 0;\n`\n\nconst Section = styled.div`\n  margin-bottom: 24px;\n`\n\nconst Icon = styled.div`\n  text-align: center;\n`\n\nconst Text = styled(UIKitText)`\n  flex: 1;\n  padding: 0 8px;\n`\n\nconst Row = styled.div`\n  align-items: start;\n  display: flex;\n  margin-bottom: 16px;\n`\n\nconst HowItWorks = () => {\n  const TranslateString = useI18n()\n\n  return (\n    <StyledHowItWorks>\n      <Section>\n        <Heading id=\"how-it-works\" color=\"secondary\" size=\"lg\" mb=\"16px\">\n          {TranslateString(632, 'How it works')}\n        </Heading>\n        <Row>\n          <Icon>\n            <ArrowForwardIcon />\n          </Icon>\n          <Text>\n            {TranslateString(634, 'Winners will be able to claim an NFT on this page once the claiming period starts.')}\n          </Text>\n        </Row>\n        <Row>\n          <Icon>\n            <ArrowForwardIcon />\n          </Icon>\n          <Text>\n            {TranslateString(636, 'If you’re not selected, you won’t be able to claim. Better luck next time!')}\n          </Text>\n        </Row>\n        <Row>\n          <Icon>\n            <ArrowForwardIcon />\n          </Icon>\n          <Text>\n            {TranslateString(\n              638,\n              \"Winners can trade in their NFTs for a CAKE value until the expiry date written below. If you don't trade in your NFT by then, don’t worry: you’ll still keep it in your wallet!\",\n            )}\n          </Text>\n        </Row>\n      </Section>\n      <Section>\n        <Heading color=\"secondary\" size=\"lg\" mb=\"16px\">\n          {TranslateString(640, 'How are winners selected?')}\n        </Heading>\n        <Row>\n          <Icon>\n            <ArrowForwardIcon />\n          </Icon>\n          <Text>{TranslateString(642, 'Winners are selected at random! Good luck!')}</Text>\n        </Row>\n      </Section>\n      <div>\n        <Button\n          as=\"a\"\n          href=\"https://docs.google.com/forms/d/e/1FAIpQLSfToBNlovtMvTZFSwOhk0TBiDPMGasLxqG0RB-kJN85HR_avA/viewform\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          {TranslateString(644, 'Register for a chance to win')}\n        </Button>\n      </div>\n    </StyledHowItWorks>\n  )\n}\n\nexport default HowItWorks\n","import styled from 'styled-components'\n\nconst InfoRow = styled.div`\n  align-items: center;\n  display: flex;\n  justify-content: space-between;\n`\n\nexport default InfoRow\n","import React from 'react'\nimport styled from 'styled-components'\n\ninterface ImageProps {\n  src: string\n  alt: string\n  originalLink?: string\n}\n\nconst Container = styled.div`\n  background-color: ${({ theme }) => theme.colors.borderColor};\n  position: relative;\n  width: 100%;\n  overflow: hidden;\n  padding-bottom: 100%;\n`\n\nconst StyledImage = styled.img`\n  position: absolute;\n  width: 100%;\n  top: 0;\n  left: 0;\n  transition: opacity 1s linear;\n  height: 100%;\n  object-fit: cover;\n  border-radius: 32px 32px 0 0;\n`\n\nconst Image: React.FC<ImageProps> = ({ src, alt, originalLink }) => {\n  const previewImage = <StyledImage src={src} alt={alt} />\n\n  return (\n    <Container>\n      {originalLink ? (\n        <a href={originalLink} target=\"_blank\" rel=\"noreferrer noopener\">\n          {previewImage}\n        </a>\n      ) : (\n        previewImage\n      )}\n    </Container>\n  )\n}\n\nexport default Image\n","import React, { createContext, useEffect, useRef, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport useBlock from 'hooks/useBlock'\nimport useGetWalletNfts, { NftMap } from 'hooks/useGetWalletNfts'\nimport { getBunnyFactoryAddress } from 'utils/addressHelpers'\nimport { getPancakeRabbitContract } from 'utils/contractHelpers'\nimport multicall from 'utils/multicall'\nimport bunnyFactory from 'config/abi/bunnyFactory.json'\n\nconst bunnyFactoryAddress = getBunnyFactoryAddress()\n\ntype State = {\n  isInitialized: boolean\n  hasClaimed: boolean\n  endBlockNumber: number\n  startBlockNumber: number\n  balanceOf: number\n}\n\ntype Context = {\n  nfts: NftMap\n  canBurnNft: boolean\n  getTokenIds: (bunnyId: number) => number[]\n  reInitialize: () => void\n} & State\n\nexport const NftProviderContext = createContext<Context | null>(null)\n\nconst NftProvider: React.FC = ({ children }) => {\n  const isMounted = useRef(true)\n  const [state, setState] = useState<State>({\n    isInitialized: false,\n    hasClaimed: false,\n    startBlockNumber: 0,\n    endBlockNumber: 0,\n    balanceOf: 0,\n  })\n  const { account } = useWallet()\n  const currentBlock = useBlock()\n  const { nfts: nftList } = useGetWalletNfts()\n  const { isInitialized } = state\n\n  // Static data\n  useEffect(() => {\n    const fetchContractData = async () => {\n      try {\n        const [startBlockNumberArr, endBlockNumberArr] = await multicall(bunnyFactory, [\n          { address: bunnyFactoryAddress, name: 'startBlockNumber' },\n          { address: bunnyFactoryAddress, name: 'endBlockNumber' },\n        ])\n\n        // TODO: Figure out why these are coming back as arrays\n        const [startBlockNumber]: [BigNumber] = startBlockNumberArr\n        const [endBlockNumber]: [BigNumber] = endBlockNumberArr\n\n        setState((prevState) => ({\n          ...prevState,\n          isInitialized: true,\n          startBlockNumber: startBlockNumber.toNumber(),\n          endBlockNumber: endBlockNumber.toNumber(),\n        }))\n      } catch (error) {\n        console.error('an error occured', error)\n      }\n    }\n\n    fetchContractData()\n  }, [isInitialized, setState])\n\n  // Data from the contract that needs an account\n  useEffect(() => {\n    const fetchContractData = async () => {\n      try {\n        const pancakeRabbitsContract = getPancakeRabbitContract()\n        const [hasClaimedArr] = await multicall(bunnyFactory, [\n          { address: bunnyFactoryAddress, name: 'hasClaimed', params: [account] },\n        ])\n        const balanceOf = await pancakeRabbitsContract.methods.balanceOf(account).call()\n        const [hasClaimed]: [boolean] = hasClaimedArr\n\n        setState((prevState) => ({\n          ...prevState,\n          isInitialized: true,\n          hasClaimed,\n          balanceOf,\n        }))\n      } catch (error) {\n        console.error('an error occured', error)\n      }\n    }\n\n    if (account) {\n      fetchContractData()\n    }\n  }, [isInitialized, account, setState])\n\n  useEffect(() => {\n    return () => {\n      isMounted.current = false\n    }\n  }, [isMounted])\n\n  const canBurnNft = currentBlock <= state.endBlockNumber\n  const getTokenIds = (bunnyId: number) => nftList[bunnyId]?.tokenIds\n\n  /**\n   * Allows consumers to re-fetch all data from the contract. Triggers the effects.\n   * For example when a transaction has been completed\n   */\n  const reInitialize = () => {\n    // Only attempt to re-initialize if the component is still mounted\n    // Transactions can take awhile so it is likely some users will navigate to another page\n    // before the transaction is finished\n    if (isMounted.current) {\n      setState((prevState) => ({ ...prevState, isInitialized: false }))\n    }\n  }\n\n  return (\n    <NftProviderContext.Provider value={{ ...state, nfts: nftList, canBurnNft, getTokenIds, reInitialize }}>\n      {children}\n    </NftProviderContext.Provider>\n  )\n}\n\nexport default NftProvider\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport Web3 from 'web3'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { Button, Input, Modal, Text } from '@pancakeswap-libs/uikit'\nimport { Nft } from 'config/constants/types'\nimport useI18n from 'hooks/useI18n'\nimport { usePancakeRabbits } from 'hooks/useContract'\nimport InfoRow from './InfoRow'\n\ninterface TransferNftModalProps {\n  nft: Nft\n  tokenIds: number[]\n  onSuccess: () => any\n  onDismiss?: () => void\n}\n\nconst Value = styled(Text)`\n  font-weight: 600;\n`\n\nconst ModalContent = styled.div`\n  margin-bottom: 16px;\n`\n\nconst Actions = styled.div`\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  grid-gap: 8px;\n`\n\nconst Label = styled.label`\n  color: ${({ theme }) => theme.colors.text};\n  display: block;\n  margin-bottom: 8px;\n  margin-top: 24px;\n`\n\nconst TransferNftModal: React.FC<TransferNftModalProps> = ({ nft, tokenIds, onSuccess, onDismiss }) => {\n  const [isLoading, setIsLoading] = useState(false)\n  const [value, setValue] = useState('')\n  const [error, setError] = useState(null)\n  const TranslateString = useI18n()\n  const { account } = useWallet()\n  const pancakeRabbitsContract = usePancakeRabbits()\n\n  const handleConfirm = async () => {\n    try {\n      const isValidAddress = Web3.utils.isAddress(value)\n\n      if (!isValidAddress) {\n        setError(TranslateString(999, 'Please enter a valid wallet address'))\n      } else {\n        await pancakeRabbitsContract.methods\n          .transferFrom(account, value, tokenIds[0])\n          .send({ from: account })\n          .on('sending', () => {\n            setIsLoading(true)\n          })\n          .on('receipt', () => {\n            onDismiss()\n            onSuccess()\n          })\n          .on('error', () => {\n            console.error(error)\n            setError('Unable to transfer NFT')\n            setIsLoading(false)\n          })\n      }\n    } catch (err) {\n      console.error('Unable to transfer NFT:', err)\n    }\n  }\n\n  const handleChange = (evt: React.ChangeEvent<HTMLInputElement>) => {\n    const { value: inputValue } = evt.target\n    setValue(inputValue)\n  }\n\n  return (\n    <Modal title={TranslateString(999, 'Transfer NFT')} onDismiss={onDismiss}>\n      <ModalContent>\n        {error && (\n          <Text color=\"failure\" mb=\"8px\">\n            {error}\n          </Text>\n        )}\n        <InfoRow>\n          <Text>{TranslateString(999, 'Transferring')}:</Text>\n          <Value>{`1x \"${nft.name}\" NFT`}</Value>\n        </InfoRow>\n        <Label htmlFor=\"transferAddress\">{TranslateString(999, 'Receiving address')}:</Label>\n        <Input\n          id=\"transferAddress\"\n          name=\"address\"\n          type=\"text\"\n          placeholder={TranslateString(999, 'Paste address')}\n          value={value}\n          onChange={handleChange}\n          isWarning={error}\n          disabled={isLoading}\n        />\n      </ModalContent>\n      <Actions>\n        <Button fullWidth variant=\"secondary\" onClick={onDismiss}>\n          {TranslateString(462, 'Cancel')}\n        </Button>\n        <Button fullWidth onClick={handleConfirm} disabled={!account || isLoading || !value}>\n          {TranslateString(464, 'Confirm')}\n        </Button>\n      </Actions>\n    </Modal>\n  )\n}\n\nexport default TransferNftModal\n","import React, { useState, useContext } from 'react'\nimport styled from 'styled-components'\nimport {\n  Card,\n  CardBody,\n  Heading,\n  Tag,\n  Button,\n  ChevronUpIcon,\n  ChevronDownIcon,\n  Text,\n  CardFooter,\n  useModal,\n} from '@pancakeswap-libs/uikit'\nimport { useProfile } from 'state/hooks'\nimport useI18n from 'hooks/useI18n'\nimport { Nft } from 'config/constants/types'\nimport InfoRow from '../InfoRow'\nimport Image from '../Image'\nimport { NftProviderContext } from '../../contexts/NftProvider'\nimport TransferNftModal from '../TransferNftModal'\n\ninterface NftCardProps {\n  nft: Nft\n}\n\nconst Header = styled(InfoRow)`\n  min-height: 28px;\n`\n\nconst DetailsButton = styled(Button).attrs({ variant: 'text', fullWidth: true })`\n  height: auto;\n  padding: 16px 24px;\n\n  &:hover:not(:disabled):not(:active) {\n    background-color: transparent;\n  }\n\n  &:focus:not(:active) {\n    box-shadow: none;\n  }\n`\n\nconst InfoBlock = styled.div`\n  padding: 24px;\n`\n\nconst NftCard: React.FC<NftCardProps> = ({ nft }) => {\n  const [isOpen, setIsOpen] = useState(false)\n  const TranslateString = useI18n()\n  const { isInitialized, getTokenIds, reInitialize } = useContext(NftProviderContext)\n  const { profile } = useProfile()\n  const { bunnyId, name, images, description } = nft\n  const tokenIds = getTokenIds(bunnyId)\n  const walletOwnsNft = tokenIds && tokenIds.length > 0\n  const Icon = isOpen ? ChevronUpIcon : ChevronDownIcon\n\n  const handleClick = async () => {\n    setIsOpen(!isOpen)\n  }\n\n  const handleSuccess = () => {\n    reInitialize()\n  }\n\n  const [onPresentTransferModal] = useModal(\n    <TransferNftModal nft={nft} tokenIds={tokenIds} onSuccess={handleSuccess} />,\n  )\n\n  return (\n    <Card isActive={walletOwnsNft}>\n      <Image src={`/images/nfts/${images.lg}`} alt={name} originalLink={walletOwnsNft ? images.ipfs : null} />\n      <CardBody>\n        <Header>\n          <Heading>{name}</Heading>\n          {isInitialized && tokenIds && (\n            <Tag outline variant=\"secondary\">\n              {TranslateString(999, 'In Wallet')}\n            </Tag>\n          )}\n          {profile?.nft?.bunnyId === bunnyId && (\n            <Tag outline variant=\"success\">\n              {TranslateString(999, 'Profile Pic')}\n            </Tag>\n          )}\n        </Header>\n        {isInitialized && walletOwnsNft && (\n          <Button fullWidth variant=\"secondary\" mt=\"24px\" onClick={onPresentTransferModal}>\n            {TranslateString(999, 'Transfer')}\n          </Button>\n        )}\n      </CardBody>\n      <CardFooter p=\"0\">\n        <DetailsButton endIcon={<Icon width=\"24px\" color=\"primary\" />} onClick={handleClick}>\n          {TranslateString(658, 'Details')}\n        </DetailsButton>\n        {isOpen && (\n          <InfoBlock>\n            <Text as=\"p\" color=\"textSubtle\" style={{ textAlign: 'center' }}>\n              {description}\n            </Text>\n          </InfoBlock>\n        )}\n      </CardFooter>\n    </Card>\n  )\n}\n\nexport default NftCard\n","import styled from 'styled-components'\nimport { BaseLayout } from '@pancakeswap-libs/uikit'\n\nconst NftGrid = styled(BaseLayout)`\n  padding-bottom: 24px;\n  padding-top: 24px;\n\n  & > div {\n    grid-column: 2 / 6;\n\n    ${({ theme }) => theme.mediaQueries.sm} {\n      grid-column: span 4;\n    }\n  }\n`\n\nexport default NftGrid\n","import React from 'react'\nimport orderBy from 'lodash/orderBy'\nimport nfts from 'config/constants/nfts'\nimport NftCard from './NftCard'\nimport NftGrid from './NftGrid'\n\nconst NftList = () => {\n  return (\n    <NftGrid>\n      {orderBy(nfts, 'sortOrder').map((nft) => (\n        <div key={nft.name}>\n          <NftCard nft={nft} />\n        </div>\n      ))}\n    </NftGrid>\n  )\n}\n\nexport default NftList\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Heading } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport Page from 'components/layout/Page'\nimport HowItWorks from './components/HowItWorks'\nimport NftList from './components/NftList'\nimport NftProvider from './contexts/NftProvider'\n\nconst StyledHero = styled.div`\n  border-bottom: 1px solid ${({ theme }) => theme.colors.textSubtle};\n  margin-bottom: 24px;\n  padding-bottom: 32px;\n`\n\nconst Nft = () => {\n  const TranslateString = useI18n()\n\n  return (\n    <NftProvider>\n      <Page>\n        <StyledHero>\n          <Heading as=\"h1\" size=\"xxl\" color=\"secondary\" mb=\"24px\">\n            NFTs\n          </Heading>\n          <Heading as=\"h2\" size=\"lg\" color=\"secondary\">\n            {TranslateString(999, 'Trade in for CAKE, or keep for your collection!')}\n          </Heading>\n        </StyledHero>\n        <NftList />\n        <HowItWorks />\n      </Page>\n    </NftProvider>\n  )\n}\n\nexport default Nft\n"],"sourceRoot":""}