{"version":3,"sources":["hooks/useFarmsWithBalance.ts","hooks/useAllEarnings.ts","views/Home/components/CardValue.tsx","views/Home/components/CakeHarvestBalance.tsx","views/Home/components/CakeWalletBalance.tsx","views/Home/components/FarmStakingCard.tsx","views/Home/components/CakeWinnings.tsx","views/Home/components/LotteryJackpot.tsx","views/Home/components/LotteryCard.tsx","views/Home/components/CakeStats.tsx","views/Home/components/TotalValueLockedCard.tsx","hooks/api.ts","views/Home/components/EarnAPYCard.tsx","views/Home/components/EarnAssetCard.tsx","hooks/useLotteryTotalPrizesUsd.ts","views/Home/components/WinCard.tsx","views/Home/Home.tsx"],"names":["useFarmsWithBalance","useState","farmsWithBalances","setFarmsWithBalances","account","useWallet","fastRefresh","useRefresh","useEffect","a","calls","farmsConfig","map","farm","address","getMasterChefAddress","name","params","pid","multicall","masterChefABI","rawResults","results","index","balance","BigNumber","fetchBalances","useAllEarnings","balances","setBalance","res","fetchAllBalances","CardValue","value","decimals","fontSize","useCountUp","start","end","duration","separator","undefined","countUp","update","updateValue","useRef","current","bold","CakeHarvestBalance","TranslateString","useI18n","earningsSum","reduce","accum","earning","div","pow","toNumber","color","style","lineHeight","CakeWalletBalance","cakeBalance","useTokenBalance","getCakeAddress","getBalanceNumber","StyledFarmStakingCard","styled","Card","Block","CardImage","img","Label","theme","colors","textSubtle","Actions","FarmedStakingCard","pendingTx","setPendingTx","balancesWithValue","filter","balanceType","onReward","useAllHarvest","farmWithBalance","harvestAllFarms","useCallback","size","mb","src","alt","width","height","id","disabled","length","onClick","fullWidth","UnlockButton","CakeWinnings","claimAmount","useTotalClaim","LotteryJackpot","lotteryPrizeAmount","useTotalRewards","toLocaleString","maximumFractionDigits","StyledLotteryCard","lotteryHasDrawn","useGetLotteryHasDrawn","requesteClaim","setRequestedClaim","allowance","useLotteryAllowance","useModal","PurchaseWarningModal","onPresentApprove","onMultiClaim","useMultiClaimLottery","useApproval","handleApprove","requestedApproval","handleClaim","console","error","max","tokenName","onPresentBuy","marginRight","variant","StyledCakeStats","Row","CakeStats","totalSupply","useTotalSupply","burnedBalance","useBurnedBalance","cakeSupply","StyledTotalValueLockedCard","TotalValueLockedCard","data","setData","fetch","response","json","responsedata","fetchData","useGetStats","tvl","total_value_locked_all","mediaQueries","lg","CardMidContent","Heading","attrs","EarnAPYCard","farmsLP","useFarms","bnbPrice","usePriceBnbBusd","maxAPY","Number","MIN_VALUE","getHighestAPY","activeFarms","multiplier","calculateAPY","slice","farmsToDisplay","cakePriceVsBNB","find","CAKE_POOL_PID","tokenPriceVsQuote","tokenAmount","lpTotalInQuoteToken","cakeRewardPerBlock","CAKE_PER_BLOCK","times","poolWeight","cakeRewardPerYear","BLOCKS_PER_YEAR","apy","quoteTokenSymbol","QuoteToken","BUSD","CAKE","dual","cakeApy","dualApy","rewardPerBlock","plus","animation","justifyContent","exact","activeClassName","to","mt","EarnAssetCard","activeNonCakePools","pools","pool","isFinished","includes","latestPools","orderBy","assets","join","useLotteryTotalPrizesUsd","totalRewards","usePriceCakeBusd","WinCard","lotteryPrize","Math","round","Hero","Cards","BaseLayout","sm","CTACards","Home","Page","as","FarmStakingCard","LotteryCard"],"mappings":"+XAyCeA,EA3Ba,WAAO,IAAD,EACkBC,mBAA4B,IAD9C,mBACzBC,EADyB,KACNC,EADM,KAExBC,EAAYC,cAAZD,QACAE,EAAgBC,cAAhBD,YAqBR,OAnBAE,qBAAU,WAcJJ,GAbe,uCAAG,gCAAAK,EAAA,6DACdC,EAAQC,IAAYC,KAAI,SAACC,GAAD,MAAW,CACvCC,QAASC,cACTC,KAAM,cACNC,OAAQ,CAACJ,EAAKK,IAAKd,OAJD,SAOKe,YAAUC,EAAeV,GAP9B,OAOdW,EAPc,OAQdC,EAAUX,IAAYC,KAAI,SAACC,EAAMU,GAAP,mBAAC,eAAsBV,GAAvB,IAA6BW,QAAS,IAAIC,IAAUJ,EAAWE,SAE/FpB,EAAqBmB,GAVD,2CAAH,oDAcjBI,KAED,CAACtB,EAASE,IAENJ,G,SCJMyB,EA1BQ,WAAO,IAAD,EACI1B,mBAAS,IADb,mBACpB2B,EADoB,KACVC,EADU,KAEnBzB,EAAiCC,cAAjCD,QACAE,EAAgBC,cAAhBD,YAoBR,OAlBAE,qBAAU,WAaJJ,GAZkB,uCAAG,8BAAAK,EAAA,6DACjBC,EAAQC,IAAYC,KAAI,SAACC,GAAD,MAAW,CACvCC,QAASC,cACTC,KAAM,cACNC,OAAQ,CAACJ,EAAKK,IAAKd,OAJE,SAOLe,YAAUC,EAAeV,GAPpB,OAOjBoB,EAPiB,OASvBD,EAAWC,GATY,2CAAH,oDAapBC,KAED,CAAC3B,EAASE,IAENsB,G,gBCGMI,EAxB6B,SAAC,GAA4C,IAA1CC,EAAyC,EAAzCA,MAAOC,EAAkC,EAAlCA,SAAkC,IAAxBC,gBAAwB,MAAb,OAAa,IAC1DC,qBAAW,CACrCC,MAAO,EACPC,IAAKL,EACLM,SAAU,EACVC,UAAW,IACXN,cAEeO,IAAbP,EAAyBA,EAAWD,EAAQ,EAAI,EAAIA,EAAQ,IAAM,EAAI,IAPlES,EAD8E,EAC9EA,QAASC,EADqE,EACrEA,OAUXC,EAAcC,iBAAOF,GAM3B,OAJAnC,qBAAU,WACRoC,EAAYE,QAAQb,KACnB,CAACA,EAAOW,IAGT,cAAC,IAAD,CAAMG,MAAI,EAACZ,SAAUA,EAArB,SACGO,KCFQM,EAnBY,WACzB,IAAMC,EAAkBC,cAChB9C,EAAYC,cAAZD,QAEF+C,EADcxB,IACYyB,QAAO,SAACC,EAAOC,GAC7C,OAAOD,EAAQ,IAAI5B,IAAU6B,GAASC,IAAI,IAAI9B,IAAU,IAAI+B,IAAI,KAAKC,aACpE,GAEH,OAAKrD,EAQE,cAAC,EAAD,CAAW6B,MAAOkB,IANrB,cAAC,IAAD,CAAMO,MAAM,eAAeC,MAAO,CAAEC,WAAY,QAAhD,SACGX,EAAgB,IAAK,a,iBCMfY,GAhBW,WACxB,IAAMZ,EAAkBC,cAClBY,EAAcC,YAAgBC,eAGpC,OAFoB3D,cAAZD,QAUD,cAAC,EAAD,CAAW6B,MAAOgC,YAAiBH,GAAc3B,SAAS,SAN7D,cAAC,IAAD,CAAMuB,MAAM,eAAeC,MAAO,CAAEC,WAAY,QAAhD,SACGX,EAAgB,IAAK,aCNxBiB,GAAwBC,YAAOC,IAAPD,CAAH,uKAOrBE,GAAQF,IAAOZ,IAAV,oDAILe,GAAYH,IAAOI,IAAV,oDAITC,GAAQL,IAAOZ,IAAV,+DACA,qBAAGkB,MAAkBC,OAAOC,cAIjCC,GAAUT,IAAOZ,IAAV,iDA4DEsB,GAxDW,WAAO,IAAD,EACI5E,oBAAS,GADb,mBACvB6E,EADuB,KACZC,EADY,KAEtB3E,EAAYC,cAAZD,QACF6C,EAAkBC,cAElB8B,EADmBhF,IACkBiF,QAAO,SAACC,GAAD,OAAiBA,EAAY1D,QAAQiC,WAAa,KAE5F0B,EAAaC,YAAcJ,EAAkBpE,KAAI,SAACyE,GAAD,OAAqBA,EAAgBnE,QAAtFiE,SAEFG,EAAkBC,sBAAW,sBAAC,sBAAA9E,EAAA,6DAClCsE,GAAa,GADqB,kBAG1BI,IAH0B,6EAOhCJ,GAAa,GAPmB,0EASjC,CAACI,IAEJ,OACE,cAACjB,GAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAASsB,KAAK,KAAKC,GAAG,OAAtB,SACGxC,EAAgB,IAAK,qBAExB,cAACqB,GAAD,CAAWoB,IAAI,mBAAmBC,IAAI,YAAYC,MAAO,GAAIC,OAAQ,KACrE,eAACxB,GAAD,WACE,cAAC,EAAD,IACA,cAACG,GAAD,UAAQvB,EAAgB,IAAK,wBAE/B,eAACoB,GAAD,WACE,cAAC,GAAD,IACA,cAACG,GAAD,UAAQvB,EAAgB,IAAK,uBAE/B,cAAC2B,GAAD,UACGxE,EACC,cAAC,IAAD,CACE0F,GAAG,cACHC,SAAUf,EAAkBgB,QAAU,GAAKlB,EAC3CmB,QAASX,EACTY,WAAS,EAJX,SAMGpB,EACG7B,EAAgB,IAAK,mBACrBA,EAAgB,IAAD,uBAAsB+B,EAAkBgB,OAAxC,QAGrB,cAACG,EAAA,EAAD,CAAcD,WAAS,Y,sECzEpBE,GALM,WAAO,IAClBC,EAAgBC,eAAhBD,YACR,OAAO,cAAC,EAAD,CAAWpE,MAAOgC,YAAiBoC,MCU7BE,GAZQ,WACrB,IAAMC,EAAqBC,eAE3B,OACE,cAAC,IAAD,CAAM1D,MAAI,EAACZ,SAAS,OAApB,SACG8B,YAAiBuC,GAAoBE,oBAAejE,EAAW,CAC9DkE,sBAAuB,OCMzBC,GAAoBzC,YAAOC,IAAPD,CAAH,yKAOjBE,GAAQF,IAAOZ,IAAV,oDAILe,GAAYH,IAAOI,IAAV,oDAITC,GAAQL,IAAOZ,IAAV,+DACA,qBAAGkB,MAAkBC,OAAOC,cAIjCC,GAAUT,IAAOZ,IAAV,wGAgFEsB,GAxEW,WACxB,IAAMgC,EAAkBC,eADM,EAEa7G,oBAAS,GAFtB,mBAEvB8G,EAFuB,KAERC,EAFQ,KAGxB/D,EAAkBC,cAClB+D,EAAYC,eAJY,EAKHC,aAAS,cAACC,GAAA,EAAD,KAA7BC,EALuB,oBAMtBhB,EAAgBC,eAAhBD,YACAiB,EAAiBC,eAAjBD,aACFxD,EAAcC,YAAgBC,eARN,EASewD,aAAYH,GAAjDI,EATsB,EAStBA,cAAeC,EATO,EASPA,kBAEjBC,EAAcpC,sBAAW,sBAAC,sBAAA9E,EAAA,sEAE5BuG,GAAkB,GAFU,SAGPM,IAHO,eAM1BN,GAAkB,GANQ,gDAS5BY,QAAQC,MAAR,MAT4B,yDAW7B,CAACP,EAAcN,IAtBY,EAuCPG,aAAS,cAAC,KAAD,CAAUW,IAAKhE,EAAaiE,UAAU,UAA/DC,EAvCuB,oBAyC9B,OACE,cAACpB,GAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAASpB,KAAK,KAAKC,GAAG,OAAtB,SACGxC,EAAgB,IAAK,2BAExB,cAAC,GAAD,CAAWyC,IAAI,qBAAqBC,IAAI,YAAYC,MAAO,GAAIC,OAAQ,KACvE,eAAC,GAAD,WACE,cAAC,GAAD,IACA,cAAC,GAAD,UAAQ5C,EAAgB,IAAK,wBAE/B,eAAC,GAAD,WACE,cAAC,GAAD,IACA,cAAC,GAAD,UAAQA,EAAgB,IAAK,iCAE/B,eAAC,GAAD,WACE,cAAC,IAAD,CACE6C,GAAG,6BACHC,SAA4C,IAAlC9B,YAAiBoC,IAAsBU,EACjDd,QAAS0B,EACThE,MAAO,CAAEsE,YAAa,OAJxB,SAMGhF,EAAgB,IAAK,sBAtCzBgE,EAAUxD,WAQb,cAAC,IAAD,CAAQqC,GAAG,wBAAwBoC,QAAQ,YAAYjC,QAAS+B,EAAcjC,SAAUc,EAAxF,SACG5D,EAAgB,IAAK,iBAPtB,cAAC,IAAD,CAAQiD,WAAS,EAACH,SAAU2B,EAAmBzB,QAASwB,EAAxD,SACGxE,EAAgB,IAAK,2BChE1BkF,GAAkBhE,YAAOC,IAAPD,CAAH,yEAKfiE,GAAMjE,IAAOZ,IAAV,oJAqCM8E,GA7BG,WAChB,IAAMpF,EAAkBC,cAClBoF,EAAcC,cACdC,EAAgBC,YAAiBzE,eACjC0E,EAAaJ,EAAcrE,YAAiBqE,GAAerE,YAAiBuE,GAAiB,EAEnG,OACE,cAACL,GAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAS3C,KAAK,KAAKC,GAAG,OAAtB,SACGxC,EAAgB,IAAK,gBAExB,eAACmF,GAAD,WACE,cAAC,IAAD,CAAMjG,SAAS,OAAf,SAAuBc,EAAgB,IAAK,uBAC3CyF,GAAc,cAAC,EAAD,CAAWvG,SAAS,OAAOF,MAAOyG,OAEnD,eAACN,GAAD,WACE,cAAC,IAAD,CAAMjG,SAAS,OAAf,SAAuBc,EAAgB,IAAK,uBAC5C,cAAC,EAAD,CAAWd,SAAS,OAAOF,MAAOgC,YAAiBuE,QAErD,eAACJ,GAAD,WACE,cAAC,IAAD,CAAMjG,SAAS,OAAf,SAAuBc,EAAgB,IAAK,oBAC5C,cAAC,EAAD,CAAWd,SAAS,OAAOD,SAAU,EAAGD,MAAO,cCtCnD0G,GAA6BxE,YAAOC,IAAPD,CAAH,kFAgCjByE,GA1Bc,WAC3B,IAAM3F,EAAkBC,cAClB2F,ECemB,WAAO,IAAD,EACP5I,mBAAiC,MAD1B,mBACxB4I,EADwB,KAClBC,EADkB,KAkB/B,OAfAtI,qBAAU,YACO,uCAAG,8BAAAC,EAAA,+EAESsI,MAAM,GAAD,OA7Bb,qCA6Ba,UAFd,cAERC,EAFQ,gBAG8BA,EAASC,OAHvC,OAGRC,EAHQ,OAKdJ,EAAQI,GALM,kDAOdtB,QAAQC,MAAM,wBAAd,MAPc,0DAAH,oDAWfsB,KACC,CAACL,IAEGD,EDjCMO,GACPC,EAAMR,EAAOA,EAAKS,uBAAuB5C,eAAe,QAAS,CAAEC,sBAAuB,IAAO,KAEvG,OACE,cAACgC,GAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAASnD,KAAK,KAAKC,GAAG,OAAtB,SACGxC,EAAgB,IAAK,8BAEvB4F,EACC,qCACE,cAAC,IAAD,CAASrD,KAAK,KAAd,oBAAwB6D,KACxB,cAAC,IAAD,CAAM3F,MAAM,aAAZ,SAA0BT,EAAgB,IAAK,uCAGjD,mCACE,cAAC,IAAD,CAAU4C,OAAQ,a,oCEpBxB3B,GAAwBC,YAAOC,IAAPD,CAAH,+IAKvB,qBAAGM,MAAkB8E,aAAaC,MAKhCC,GAAiBtF,YAAOuF,KAASC,MAAM,CAAEnE,KAAM,MAA9BrB,CAAH,kDAkFLyF,GA/EK,WAClB,IAAM3G,EAAkBC,cAClB2G,EAAUC,eACVC,EAAWC,eAEXC,EAASpH,iBAAOqH,OAAOC,WAEvBC,EAAgB,WACpB,IAAMC,EAAcR,EAAQ5E,QAAO,SAACpE,GAAD,OAAuB,IAAbA,EAAKK,KAAiC,OAApBL,EAAKyJ,cAIpE,OAFAC,EAAaF,IAEY,IAAjBJ,EAAOnH,SAAe4D,eAAe,SAAS8D,MAAM,GAAI,IAG5DD,EAAehF,uBACnB,SAACkF,GAAoB,IAAD,EACZC,EAAiB,IAAIjJ,KAAU,UAAAoI,EAAQc,MAAK,SAAC9J,GAAD,OAAUA,EAAKK,MAAQ0J,eAApC,eAAoDC,oBAAqB,GAE9GJ,EAAe7J,KAAI,SAACC,GAClB,IAAKA,EAAKiK,cAAgBjK,EAAKkK,sBAAwBlK,EAAKkK,oBAC1D,OAAOlK,EAET,IAAMmK,EAAqBC,KAAeC,MAAMrK,EAAKsK,YAC/CC,EAAoBJ,EAAmBE,MAAMG,MAE/CC,EAAMZ,EAAeQ,MAAME,GAAmB7H,IAAI1C,EAAKkK,qBAE3D,GAAIlK,EAAK0K,mBAAqBC,KAAWC,KACvCH,EAAMZ,EAAeQ,MAAME,GAAmB7H,IAAI1C,EAAKkK,qBAAqBG,MAAMnB,QAC7E,GAAIlJ,EAAK0K,mBAAqBC,KAAWE,KAC9CJ,EAAMF,EAAkB7H,IAAI1C,EAAKkK,0BAC5B,GAAIlK,EAAK8K,KAAM,CACpB,IAAMC,EACJ/K,GAAQ6J,EAAeQ,MAAMF,GAAoBE,MAAMG,MAAiB9H,IAAI1C,EAAKkK,qBAC7Ec,EACJhL,EAAKgK,mBACL,IAAIpJ,IAAUZ,EAAKgK,mBAChBK,MAAMrK,EAAK8K,KAAKG,gBAChBZ,MAAMG,MACN9H,IAAI1C,EAAKkK,qBAEdO,EAAMM,GAAWC,GAAWD,EAAQG,KAAKF,GAK3C,OAFI5B,EAAOnH,QAAUwI,EAAI7H,aAAYwG,EAAOnH,QAAUwI,EAAI7H,YAEnD6H,OAGX,CAACvB,EAAUF,IAGb,OACE,cAAC,GAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAASnG,MAAM,WAAW8B,KAAK,KAA/B,wBAGA,cAACiE,GAAD,CAAgB/F,MAAM,UAAtB,SACG0G,IAAa,UACTA,IADS,aACWnH,EAAgB,IAAK,QAE5C,cAAC,IAAD,CAAU+I,UAAU,QAAQ9D,QAAQ,OAAOrC,OAAO,WAGtD,eAAC,IAAD,CAAMoG,eAAe,gBAArB,UACE,cAAC,IAAD,CAASvI,MAAM,WAAW8B,KAAK,KAA/B,sBAGA,cAAC,KAAD,CAAS0G,OAAK,EAACC,gBAAgB,SAASC,GAAG,SAAStG,GAAG,eAAvD,SACE,cAAC,IAAD,CAAkBuG,GAAI,GAAI3I,MAAM,uB,uCCtFtCQ,GAAwBC,YAAOC,IAAPD,CAAH,+LAKvB,qBAAGM,MAAkB8E,aAAaC,MAKhCC,GAAiBtF,YAAOuF,KAASC,MAAM,CAAEnE,KAAM,MAA9BrB,CAAH,kDA6BLmI,GA1BO,WACpB,IAAMC,EAAqBC,KAAMvH,QAAO,SAACwH,GAAD,OAAWA,EAAKC,aAAeD,EAAK1E,UAAU4E,SAAS,WACzFC,EAAsBC,KAAQN,EAAoB,CAAC,YAAa,OAAQ,CAAC,OAAQ,SAAS/B,MAAM,EAAG,GAEnGsC,EAAS,CAAC,QAAD,oBAAYF,EAAYhM,KAAI,SAAC6L,GAAD,OAAUA,EAAK1E,eAAYgF,KAAK,MAE3E,OACE,cAAC,GAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAASrJ,MAAM,WAAW8B,KAAK,KAA/B,kBAGA,cAAC,GAAD,CAAgB9B,MAAM,mBAAtB,SAA0CoJ,IAC1C,eAAC,IAAD,CAAMb,eAAe,gBAArB,UACE,cAAC,IAAD,CAASvI,MAAM,WAAW8B,KAAK,KAA/B,sBAGA,cAAC,KAAD,CAAS0G,OAAK,EAACC,gBAAgB,SAASC,GAAG,SAAStG,GAAG,WAAvD,SACE,cAAC,IAAD,CAAkBuG,GAAI,GAAI3I,MAAM,uBC3B7BsJ,GARkB,WAC/B,IAAMC,EAAexG,eAIrB,OAHkBxC,YAAiBgJ,GACbC,eAEWzJ,YCH7BS,GAAwBC,YAAOC,IAAPD,CAAH,+IAKvB,qBAAGM,MAAkB8E,aAAaC,MAKhCC,GAAiBtF,YAAOuF,KAASC,MAAM,CAAEnE,KAAM,MAA9BrB,CAAH,kDA0BLgJ,GAvBC,WACd,IAAMC,EAAeC,KAAKC,MAAMN,MAA4BtG,iBAE5D,OACE,cAAC,GAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAShD,MAAM,WAAW8B,KAAK,KAA/B,0BAGA,eAAC,GAAD,CAAgB9B,MAAM,UAAtB,cAAkC0J,KAClC,eAAC,IAAD,CAAMnB,eAAe,gBAArB,UACE,cAAC,IAAD,CAASvI,MAAM,WAAW8B,KAAK,KAA/B,0BAGA,cAAC,KAAD,CAAS0G,OAAK,EAACC,gBAAgB,SAASC,GAAG,WAAWtG,GAAG,kBAAzD,SACE,cAAC,IAAD,CAAkBuG,GAAI,GAAI3I,MAAM,uBCrBtC6J,GAAOpJ,IAAOZ,IAAV,4gBAaN,qBAAGkB,MAAkB8E,aAAaC,MAQhCgE,GAAQrJ,YAAOsJ,IAAPtJ,CAAH,8SAUP,qBAAGM,MAAkB8E,aAAamE,MAMlC,qBAAGjJ,MAAkB8E,aAAaC,MAOhCmE,GAAWxJ,YAAOsJ,IAAPtJ,CAAH,6PAQV,qBAAGM,MAAkB8E,aAAamE,MAMlC,qBAAGjJ,MAAkB8E,aAAaC,MAqCvBoE,GA9BQ,WACrB,IAAM3K,EAAkBC,cAExB,OACE,eAAC2K,EAAA,EAAD,WACE,eAACN,GAAD,WACE,cAAC,IAAD,CAASO,GAAG,KAAKtI,KAAK,KAAKC,GAAG,OAAO/B,MAAM,YAA3C,SACGT,EAAgB,IAAK,iBAExB,cAAC,IAAD,UAAOA,EAAgB,IAAK,0DAE9B,gCACE,eAACuK,GAAD,WACE,cAACO,GAAD,IACA,cAACC,GAAD,OAEF,eAACL,GAAD,WACE,cAAC,GAAD,IACA,cAAC,GAAD,IACA,cAAC,GAAD,OAEF,eAACH,GAAD,WACE,cAAC,GAAD,IACA,cAAC,GAAD","file":"static/js/18.d81f1fb4.chunk.js","sourcesContent":["import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\nimport masterChefABI from 'config/abi/masterchef.json'\nimport { farmsConfig } from 'config/constants'\nimport { FarmConfig } from 'config/constants/types'\nimport useRefresh from './useRefresh'\n\nexport interface FarmWithBalance extends FarmConfig {\n  balance: BigNumber\n}\n\nconst useFarmsWithBalance = () => {\n  const [farmsWithBalances, setFarmsWithBalances] = useState<FarmWithBalance[]>([])\n  const { account } = useWallet()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalances = async () => {\n      const calls = farmsConfig.map((farm) => ({\n        address: getMasterChefAddress(),\n        name: 'pendingCake',\n        params: [farm.pid, account],\n      }))\n\n      const rawResults = await multicall(masterChefABI, calls)\n      const results = farmsConfig.map((farm, index) => ({ ...farm, balance: new BigNumber(rawResults[index]) }))\n\n      setFarmsWithBalances(results)\n    }\n\n    if (account) {\n      fetchBalances()\n    }\n  }, [account, fastRefresh])\n\n  return farmsWithBalances\n}\n\nexport default useFarmsWithBalance\n","import { useEffect, useState } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\nimport masterChefABI from 'config/abi/masterchef.json'\nimport { farmsConfig } from 'config/constants'\nimport useRefresh from './useRefresh'\n\nconst useAllEarnings = () => {\n  const [balances, setBalance] = useState([])\n  const { account }: { account: string } = useWallet()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchAllBalances = async () => {\n      const calls = farmsConfig.map((farm) => ({\n        address: getMasterChefAddress(),\n        name: 'pendingCake',\n        params: [farm.pid, account],\n      }))\n\n      const res = await multicall(masterChefABI, calls)\n\n      setBalance(res)\n    }\n\n    if (account) {\n      fetchAllBalances()\n    }\n  }, [account, fastRefresh])\n\n  return balances\n}\n\nexport default useAllEarnings\n","import React, { useEffect, useRef } from 'react'\nimport { useCountUp } from 'react-countup'\nimport { Text } from '@pancakeswap-libs/uikit'\n\ninterface CardValueProps {\n  value: number\n  decimals?: number\n  fontSize?: string\n}\n\nconst CardValue: React.FC<CardValueProps> = ({ value, decimals, fontSize = '40px' }) => {\n  const { countUp, update } = useCountUp({\n    start: 0,\n    end: value,\n    duration: 1,\n    separator: ',',\n    decimals:\n      // eslint-disable-next-line no-nested-ternary\n      decimals !== undefined ? decimals : value < 0 ? 4 : value > 1e5 ? 0 : 3,\n  })\n\n  const updateValue = useRef(update)\n\n  useEffect(() => {\n    updateValue.current(value)\n  }, [value, updateValue])\n\n  return (\n    <Text bold fontSize={fontSize}>\n      {countUp}\n    </Text>\n  )\n}\n\nexport default CardValue\n","import React from 'react'\nimport { Text } from '@pancakeswap-libs/uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport BigNumber from 'bignumber.js'\nimport useI18n from 'hooks/useI18n'\nimport useAllEarnings from 'hooks/useAllEarnings'\nimport CardValue from './CardValue'\n\nconst CakeHarvestBalance = () => {\n  const TranslateString = useI18n()\n  const { account } = useWallet()\n  const allEarnings = useAllEarnings()\n  const earningsSum = allEarnings.reduce((accum, earning) => {\n    return accum + new BigNumber(earning).div(new BigNumber(10).pow(18)).toNumber()\n  }, 0)\n\n  if (!account) {\n    return (\n      <Text color=\"textDisabled\" style={{ lineHeight: '60px' }}>\n        {TranslateString(298, 'Locked')}\n      </Text>\n    )\n  }\n\n  return <CardValue value={earningsSum} />\n}\n\nexport default CakeHarvestBalance\n","import React from 'react'\nimport { Text } from '@pancakeswap-libs/uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport useTokenBalance from 'hooks/useTokenBalance'\nimport useI18n from 'hooks/useI18n'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport CardValue from './CardValue'\n\nconst CakeWalletBalance = () => {\n  const TranslateString = useI18n()\n  const cakeBalance = useTokenBalance(getCakeAddress())\n  const { account } = useWallet()\n\n  if (!account) {\n    return (\n      <Text color=\"textDisabled\" style={{ lineHeight: '36px' }}>\n        {TranslateString(298, 'Locked')}\n      </Text>\n    )\n  }\n\n  return <CardValue value={getBalanceNumber(cakeBalance)} fontSize=\"24px\" />\n}\n\nexport default CakeWalletBalance\n","import React, { useState, useCallback } from 'react'\nimport styled from 'styled-components'\nimport { Heading, Card, CardBody, Button } from '@pancakeswap-libs/uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport useI18n from 'hooks/useI18n'\nimport { useAllHarvest } from 'hooks/useHarvest'\nimport useFarmsWithBalance from 'hooks/useFarmsWithBalance'\nimport UnlockButton from 'components/UnlockButton'\nimport CakeHarvestBalance from './CakeHarvestBalance'\nimport CakeWalletBalance from './CakeWalletBalance'\n\nconst StyledFarmStakingCard = styled(Card)`\n  background-image: url('/images/cake-bg.svg');\n  background-repeat: no-repeat;\n  background-position: top right;\n  min-height: 376px;\n`\n\nconst Block = styled.div`\n  margin-bottom: 16px;\n`\n\nconst CardImage = styled.img`\n  margin-bottom: 16px;\n`\n\nconst Label = styled.div`\n  color: ${({ theme }) => theme.colors.textSubtle};\n  font-size: 14px;\n`\n\nconst Actions = styled.div`\n  margin-top: 24px;\n`\n\nconst FarmedStakingCard = () => {\n  const [pendingTx, setPendingTx] = useState(false)\n  const { account } = useWallet()\n  const TranslateString = useI18n()\n  const farmsWithBalance = useFarmsWithBalance()\n  const balancesWithValue = farmsWithBalance.filter((balanceType) => balanceType.balance.toNumber() > 0)\n\n  const { onReward } = useAllHarvest(balancesWithValue.map((farmWithBalance) => farmWithBalance.pid))\n\n  const harvestAllFarms = useCallback(async () => {\n    setPendingTx(true)\n    try {\n      await onReward()\n    } catch (error) {\n      // TODO: find a way to handle when the user rejects transaction or it fails\n    } finally {\n      setPendingTx(false)\n    }\n  }, [onReward])\n\n  return (\n    <StyledFarmStakingCard>\n      <CardBody>\n        <Heading size=\"xl\" mb=\"24px\">\n          {TranslateString(542, 'Farms & Staking')}\n        </Heading>\n        <CardImage src=\"/images/cake.svg\" alt=\"cake logo\" width={64} height={64} />\n        <Block>\n          <CakeHarvestBalance />\n          <Label>{TranslateString(544, 'CAKE to Harvest')}</Label>\n        </Block>\n        <Block>\n          <CakeWalletBalance />\n          <Label>{TranslateString(546, 'CAKE in Wallet')}</Label>\n        </Block>\n        <Actions>\n          {account ? (\n            <Button\n              id=\"harvest-all\"\n              disabled={balancesWithValue.length <= 0 || pendingTx}\n              onClick={harvestAllFarms}\n              fullWidth\n            >\n              {pendingTx\n                ? TranslateString(548, 'Collecting CAKE')\n                : TranslateString(532, `Harvest all (${balancesWithValue.length})`)}\n            </Button>\n          ) : (\n            <UnlockButton fullWidth />\n          )}\n        </Actions>\n      </CardBody>\n    </StyledFarmStakingCard>\n  )\n}\n\nexport default FarmedStakingCard\n","import React from 'react'\nimport { useTotalClaim } from 'hooks/useTickets'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport CardValue from './CardValue'\n\nconst CakeWinnings = () => {\n  const { claimAmount } = useTotalClaim()\n  return <CardValue value={getBalanceNumber(claimAmount)} />\n}\n\nexport default CakeWinnings\n","import React from 'react'\nimport { Text } from '@pancakeswap-libs/uikit'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useTotalRewards } from 'hooks/useTickets'\n\nconst LotteryJackpot = () => {\n  const lotteryPrizeAmount = useTotalRewards()\n\n  return (\n    <Text bold fontSize=\"24px\">\n      {getBalanceNumber(lotteryPrizeAmount).toLocaleString(undefined, {\n        maximumFractionDigits: 2,\n      })}\n    </Text>\n  )\n}\n\nexport default LotteryJackpot\n","import React, { useState, useCallback } from 'react'\nimport styled from 'styled-components'\nimport { Heading, Card, CardBody, Button, useModal } from '@pancakeswap-libs/uikit'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport useI18n from 'hooks/useI18n'\nimport useGetLotteryHasDrawn from 'hooks/useGetLotteryHasDrawn'\nimport useTokenBalance from 'hooks/useTokenBalance'\nimport { useMultiClaimLottery } from 'hooks/useBuyLottery'\nimport { useTotalClaim } from 'hooks/useTickets'\nimport BuyModal from 'views/Lottery/components/TicketCard/BuyTicketModal'\nimport { useLotteryAllowance } from 'hooks/useAllowance'\nimport { useApproval } from 'hooks/useApproval'\nimport PurchaseWarningModal from 'views/Lottery/components/TicketCard/PurchaseWarningModal'\nimport CakeWinnings from './CakeWinnings'\nimport LotteryJackpot from './LotteryJackpot'\n\nconst StyledLotteryCard = styled(Card)`\n  background-image: url('/images/ticket-bg.svg');\n  background-repeat: no-repeat;\n  background-position: top right;\n  min-height: 376px;\n`\n\nconst Block = styled.div`\n  margin-bottom: 16px;\n`\n\nconst CardImage = styled.img`\n  margin-bottom: 16px;\n`\n\nconst Label = styled.div`\n  color: ${({ theme }) => theme.colors.textSubtle};\n  font-size: 14px;\n`\n\nconst Actions = styled.div`\n  display: flex;\n  margin-top: 24px;\n  button {\n    flex: 1 0 50%;\n  }\n`\n\nconst FarmedStakingCard = () => {\n  const lotteryHasDrawn = useGetLotteryHasDrawn()\n  const [requesteClaim, setRequestedClaim] = useState(false)\n  const TranslateString = useI18n()\n  const allowance = useLotteryAllowance()\n  const [onPresentApprove] = useModal(<PurchaseWarningModal />)\n  const { claimAmount } = useTotalClaim()\n  const { onMultiClaim } = useMultiClaimLottery()\n  const cakeBalance = useTokenBalance(getCakeAddress())\n  const { handleApprove, requestedApproval } = useApproval(onPresentApprove)\n\n  const handleClaim = useCallback(async () => {\n    try {\n      setRequestedClaim(true)\n      const txHash = await onMultiClaim()\n      // user rejected tx or didn't go thru\n      if (txHash) {\n        setRequestedClaim(false)\n      }\n    } catch (e) {\n      console.error(e)\n    }\n  }, [onMultiClaim, setRequestedClaim])\n\n  const renderLotteryTicketButtonBuyOrApprove = () => {\n    if (!allowance.toNumber()) {\n      return (\n        <Button fullWidth disabled={requestedApproval} onClick={handleApprove}>\n          {TranslateString(494, 'Approve CAKE')}\n        </Button>\n      )\n    }\n    return (\n      <Button id=\"dashboard-buy-tickets\" variant=\"secondary\" onClick={onPresentBuy} disabled={lotteryHasDrawn}>\n        {TranslateString(558, 'Buy Tickets')}\n      </Button>\n    )\n  }\n\n  const [onPresentBuy] = useModal(<BuyModal max={cakeBalance} tokenName=\"CAKE\" />)\n\n  return (\n    <StyledLotteryCard>\n      <CardBody>\n        <Heading size=\"xl\" mb=\"24px\">\n          {TranslateString(550, 'Your Lottery Winnings')}\n        </Heading>\n        <CardImage src=\"/images/ticket.svg\" alt=\"cake logo\" width={64} height={64} />\n        <Block>\n          <CakeWinnings />\n          <Label>{TranslateString(552, 'CAKE to Collect')}</Label>\n        </Block>\n        <Block>\n          <LotteryJackpot />\n          <Label>{TranslateString(554, 'Total jackpot this round')}</Label>\n        </Block>\n        <Actions>\n          <Button\n            id=\"dashboard-collect-winnings\"\n            disabled={getBalanceNumber(claimAmount) === 0 || requesteClaim}\n            onClick={handleClaim}\n            style={{ marginRight: '8px' }}\n          >\n            {TranslateString(556, 'Collect Winnings')}\n          </Button>\n          {renderLotteryTicketButtonBuyOrApprove()}\n        </Actions>\n      </CardBody>\n    </StyledLotteryCard>\n  )\n}\n\nexport default FarmedStakingCard\n","import React from 'react'\nimport { Card, CardBody, Heading, Text } from '@pancakeswap-libs/uikit'\nimport styled from 'styled-components'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useTotalSupply, useBurnedBalance } from 'hooks/useTokenBalance'\nimport useI18n from 'hooks/useI18n'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport CardValue from './CardValue'\n\nconst StyledCakeStats = styled(Card)`\n  margin-left: auto;\n  margin-right: auto;\n`\n\nconst Row = styled.div`\n  align-items: center;\n  display: flex;\n  font-size: 14px;\n  justify-content: space-between;\n  margin-bottom: 8px;\n`\n\nconst CakeStats = () => {\n  const TranslateString = useI18n()\n  const totalSupply = useTotalSupply()\n  const burnedBalance = useBurnedBalance(getCakeAddress())\n  const cakeSupply = totalSupply ? getBalanceNumber(totalSupply) - getBalanceNumber(burnedBalance) : 0\n\n  return (\n    <StyledCakeStats>\n      <CardBody>\n        <Heading size=\"xl\" mb=\"24px\">\n          {TranslateString(534, 'Cake Stats')}\n        </Heading>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(536, 'Total CAKE Supply')}</Text>\n          {cakeSupply && <CardValue fontSize=\"14px\" value={cakeSupply} />}\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(538, 'Total CAKE Burned')}</Text>\n          <CardValue fontSize=\"14px\" value={getBalanceNumber(burnedBalance)} />\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(540, 'New CAKE/block')}</Text>\n          <CardValue fontSize=\"14px\" decimals={0} value={25} />\n        </Row>\n      </CardBody>\n    </StyledCakeStats>\n  )\n}\n\nexport default CakeStats\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Card, CardBody, Heading, Skeleton, Text } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport { useGetStats } from 'hooks/api'\n\nconst StyledTotalValueLockedCard = styled(Card)`\n  align-items: center;\n  display: flex;\n  flex: 1;\n`\n\nconst TotalValueLockedCard = () => {\n  const TranslateString = useI18n()\n  const data = useGetStats()\n  const tvl = data ? data.total_value_locked_all.toLocaleString('en-US', { maximumFractionDigits: 0 }) : null\n\n  return (\n    <StyledTotalValueLockedCard>\n      <CardBody>\n        <Heading size=\"lg\" mb=\"24px\">\n          {TranslateString(762, 'Total Value Locked (TVL)')}\n        </Heading>\n        {data ? (\n          <>\n            <Heading size=\"xl\">{`$${tvl}`}</Heading>\n            <Text color=\"textSubtle\">{TranslateString(764, 'Across all LPs and Syrup Pools')}</Text>\n          </>\n        ) : (\n          <>\n            <Skeleton height={66} />\n          </>\n        )}\n      </CardBody>\n    </StyledTotalValueLockedCard>\n  )\n}\n\nexport default TotalValueLockedCard\n","import { useEffect, useState } from 'react'\n\n/*\n * Due to Cors the api was forked and a proxy was created\n * @see https://github.com/pancakeswap/gatsby-pancake-api/commit/e811b67a43ccc41edd4a0fa1ee704b2f510aa0ba\n */\nexport const baseUrl = 'https://api.pancakeswap.com/api/v1'\n\n/* eslint-disable camelcase */\n\nexport interface TradePair {\n  swap_pair_contract: string\n  base_symbol: string\n  quote_symbol: string\n  last_price: number\n  base_volume_24_h: number\n  quote_volume_24_h: number\n}\n\nexport interface ApiStatResponse {\n  update_at: string\n  '24h_total_volume': number\n  total_value_locked: number\n  total_value_locked_all: number\n  trade_pairs: {\n    [key: string]: TradePair\n  }\n}\n\nexport const useGetStats = () => {\n  const [data, setData] = useState<ApiStatResponse | null>(null)\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch(`${baseUrl}/stat`)\n        const responsedata: ApiStatResponse = await response.json()\n\n        setData(responsedata)\n      } catch (error) {\n        console.error('Unable to fetch data:', error)\n      }\n    }\n\n    fetchData()\n  }, [setData])\n\n  return data\n}\n","import React, { useCallback, useRef } from 'react'\nimport styled from 'styled-components'\nimport { Heading, Card, CardBody, Flex, ArrowForwardIcon, Skeleton } from '@pancakeswap-libs/uikit'\nimport { NavLink } from 'react-router-dom'\nimport useI18n from 'hooks/useI18n'\nimport BigNumber from 'bignumber.js'\nimport { QuoteToken } from 'config/constants/types'\nimport { useFarms, usePriceBnbBusd } from 'state/hooks'\nimport { BLOCKS_PER_YEAR, CAKE_PER_BLOCK, CAKE_POOL_PID } from 'config'\n\nconst StyledFarmStakingCard = styled(Card)`\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    margin: 0;\n    max-width: none;\n  }\n`\nconst CardMidContent = styled(Heading).attrs({ size: 'xl' })`\n  line-height: 44px;\n`\nconst EarnAPYCard = () => {\n  const TranslateString = useI18n()\n  const farmsLP = useFarms()\n  const bnbPrice = usePriceBnbBusd()\n\n  const maxAPY = useRef(Number.MIN_VALUE)\n\n  const getHighestAPY = () => {\n    const activeFarms = farmsLP.filter((farm) => farm.pid !== 0 && farm.multiplier !== '0X')\n\n    calculateAPY(activeFarms)\n\n    return (maxAPY.current * 100).toLocaleString('en-US').slice(0, -1)\n  }\n\n  const calculateAPY = useCallback(\n    (farmsToDisplay) => {\n      const cakePriceVsBNB = new BigNumber(farmsLP.find((farm) => farm.pid === CAKE_POOL_PID)?.tokenPriceVsQuote || 0)\n\n      farmsToDisplay.map((farm) => {\n        if (!farm.tokenAmount || !farm.lpTotalInQuoteToken || !farm.lpTotalInQuoteToken) {\n          return farm\n        }\n        const cakeRewardPerBlock = CAKE_PER_BLOCK.times(farm.poolWeight)\n        const cakeRewardPerYear = cakeRewardPerBlock.times(BLOCKS_PER_YEAR)\n\n        let apy = cakePriceVsBNB.times(cakeRewardPerYear).div(farm.lpTotalInQuoteToken)\n\n        if (farm.quoteTokenSymbol === QuoteToken.BUSD) {\n          apy = cakePriceVsBNB.times(cakeRewardPerYear).div(farm.lpTotalInQuoteToken).times(bnbPrice)\n        } else if (farm.quoteTokenSymbol === QuoteToken.CAKE) {\n          apy = cakeRewardPerYear.div(farm.lpTotalInQuoteToken)\n        } else if (farm.dual) {\n          const cakeApy =\n            farm && cakePriceVsBNB.times(cakeRewardPerBlock).times(BLOCKS_PER_YEAR).div(farm.lpTotalInQuoteToken)\n          const dualApy =\n            farm.tokenPriceVsQuote &&\n            new BigNumber(farm.tokenPriceVsQuote)\n              .times(farm.dual.rewardPerBlock)\n              .times(BLOCKS_PER_YEAR)\n              .div(farm.lpTotalInQuoteToken)\n\n          apy = cakeApy && dualApy && cakeApy.plus(dualApy)\n        }\n\n        if (maxAPY.current < apy.toNumber()) maxAPY.current = apy.toNumber()\n\n        return apy\n      })\n    },\n    [bnbPrice, farmsLP],\n  )\n\n  return (\n    <StyledFarmStakingCard>\n      <CardBody>\n        <Heading color=\"contrast\" size=\"lg\">\n          Earn up to\n        </Heading>\n        <CardMidContent color=\"#7645d9\">\n          {getHighestAPY() ? (\n            `${getHighestAPY()}% ${TranslateString(736, 'APR')}`\n          ) : (\n            <Skeleton animation=\"pulse\" variant=\"rect\" height=\"44px\" />\n          )}\n        </CardMidContent>\n        <Flex justifyContent=\"space-between\">\n          <Heading color=\"contrast\" size=\"lg\">\n            in Farms\n          </Heading>\n          <NavLink exact activeClassName=\"active\" to=\"/farms\" id=\"farm-apy-cta\">\n            <ArrowForwardIcon mt={30} color=\"primary\" />\n          </NavLink>\n        </Flex>\n      </CardBody>\n    </StyledFarmStakingCard>\n  )\n}\n\nexport default EarnAPYCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport orderBy from 'lodash/orderBy'\nimport { Heading, Card, CardBody, Flex, ArrowForwardIcon } from '@pancakeswap-libs/uikit'\nimport { NavLink } from 'react-router-dom'\nimport pools from 'config/constants/pools'\nimport { Pool } from 'state/types'\n\nconst StyledFarmStakingCard = styled(Card)`\n  background: linear-gradient(#53dee9, #7645d9);\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n  ${({ theme }) => theme.mediaQueries.lg} {\n    margin: 0;\n    max-width: none;\n  }\n`\nconst CardMidContent = styled(Heading).attrs({ size: 'xl' })`\n  line-height: 44px;\n`\nconst EarnAssetCard = () => {\n  const activeNonCakePools = pools.filter((pool) => !pool.isFinished && !pool.tokenName.includes('CAKE'))\n  const latestPools: Pool[] = orderBy(activeNonCakePools, ['sortOrder', 'pid'], ['desc', 'desc']).slice(0, 3)\n  // Always include CAKE\n  const assets = ['CAKE', ...latestPools.map((pool) => pool.tokenName)].join(', ')\n\n  return (\n    <StyledFarmStakingCard>\n      <CardBody>\n        <Heading color=\"contrast\" size=\"lg\">\n          Earn\n        </Heading>\n        <CardMidContent color=\"invertedContrast\">{assets}</CardMidContent>\n        <Flex justifyContent=\"space-between\">\n          <Heading color=\"contrast\" size=\"lg\">\n            in Pools\n          </Heading>\n          <NavLink exact activeClassName=\"active\" to=\"/syrup\" id=\"pool-cta\">\n            <ArrowForwardIcon mt={30} color=\"primary\" />\n          </NavLink>\n        </Flex>\n      </CardBody>\n    </StyledFarmStakingCard>\n  )\n}\n\nexport default EarnAssetCard\n","import { usePriceCakeBusd } from 'state/hooks'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useTotalRewards } from './useTickets'\n\nconst useLotteryTotalPrizesUsd = () => {\n  const totalRewards = useTotalRewards()\n  const totalCake = getBalanceNumber(totalRewards)\n  const cakePriceBusd = usePriceCakeBusd()\n\n  return totalCake * cakePriceBusd.toNumber()\n}\n\nexport default useLotteryTotalPrizesUsd\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Heading, Card, CardBody, Flex, ArrowForwardIcon } from '@pancakeswap-libs/uikit'\nimport { NavLink } from 'react-router-dom'\nimport useLotteryTotalPrizesUsd from 'hooks/useLotteryTotalPrizesUsd'\n\nconst StyledFarmStakingCard = styled(Card)`\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    margin: 0;\n    max-width: none;\n  }\n`\nconst CardMidContent = styled(Heading).attrs({ size: 'xl' })`\n  line-height: 44px;\n`\nconst WinCard = () => {\n  const lotteryPrize = Math.round(useLotteryTotalPrizesUsd()).toLocaleString()\n\n  return (\n    <StyledFarmStakingCard>\n      <CardBody>\n        <Heading color=\"contrast\" size=\"lg\">\n          Lottery with\n        </Heading>\n        <CardMidContent color=\"#7645d9\">${lotteryPrize}</CardMidContent>\n        <Flex justifyContent=\"space-between\">\n          <Heading color=\"contrast\" size=\"lg\">\n            up for grabs\n          </Heading>\n          <NavLink exact activeClassName=\"active\" to=\"/lottery\" id=\"lottery-pot-cta\">\n            <ArrowForwardIcon mt={30} color=\"primary\" />\n          </NavLink>\n        </Flex>\n      </CardBody>\n    </StyledFarmStakingCard>\n  )\n}\n\nexport default WinCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Heading, Text, BaseLayout } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport Page from 'components/layout/Page'\nimport FarmStakingCard from 'views/Home/components/FarmStakingCard'\nimport LotteryCard from 'views/Home/components/LotteryCard'\nimport CakeStats from 'views/Home/components/CakeStats'\nimport TotalValueLockedCard from 'views/Home/components/TotalValueLockedCard'\nimport EarnAPYCard from 'views/Home/components/EarnAPYCard'\nimport EarnAssetCard from 'views/Home/components/EarnAssetCard'\nimport WinCard from 'views/Home/components/WinCard'\n\nconst Hero = styled.div`\n  align-items: center;\n  background-image: url('/images/pan-bg-mobile.svg');\n  background-repeat: no-repeat;\n  background-position: top center;\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  margin: auto;\n  margin-bottom: 32px;\n  padding-top: 116px;\n  text-align: center;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    background-image: url('/images/pan-bg2.svg'), url('/images/pan-bg.svg');\n    background-position: left center, right center;\n    height: 165px;\n    padding-top: 0;\n  }\n`\n\nconst Cards = styled(BaseLayout)`\n  align-items: stretch;\n  justify-content: stretch;\n  margin-bottom: 32px;\n\n  & > div {\n    grid-column: span 6;\n    width: 100%;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    & > div {\n      grid-column: span 8;\n    }\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    & > div {\n      grid-column: span 6;\n    }\n  }\n`\n\nconst CTACards = styled(BaseLayout)`\n  align-items: start;\n  margin-bottom: 32px;\n\n  & > div {\n    grid-column: span 6;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    & > div {\n      grid-column: span 8;\n    }\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    & > div {\n      grid-column: span 4;\n    }\n  }\n`\n\nconst Home: React.FC = () => {\n  const TranslateString = useI18n()\n\n  return (\n    <Page>\n      <Hero>\n        <Heading as=\"h1\" size=\"xl\" mb=\"24px\" color=\"secondary\">\n          {TranslateString(576, 'ZetherzSwap')}\n        </Heading>\n        <Text>{TranslateString(578, 'The #1 AMM and yield farm on Binance Smart Chain.')}</Text>\n      </Hero>\n      <div>\n        <Cards>\n          <FarmStakingCard />\n          <LotteryCard />\n        </Cards>\n        <CTACards>\n          <EarnAPYCard />\n          <EarnAssetCard />\n          <WinCard />\n        </CTACards>\n        <Cards>\n          <CakeStats />\n          <TotalValueLockedCard />\n        </Cards>\n      </div>\n    </Page>\n  )\n}\n\nexport default Home\n"],"sourceRoot":""}